---
- name: Kernel Upgrade Playbook
  hosts: all
  become: true
  vars:
    python_pip_installation_file_location: "/tmp/get-pip.py"
    required_python_version: "3.11"
    json_logger_version: "2.0.4"

  tasks:
    - name: Gather pre-upgrade information
      shell: |
        uname -a
        cat /etc/redhat-release
        python3 --version
        pip3 --version
      register: pre_upgrade_info

    - name: Record critical pre-upgrade outputs
      shell: |
        pip3 list *json*
        cat /etc/fstab
        df -h
        lsblk -o name,serial
        pvs
        lvs
        vgs
      register: pre_upgrade_critical_info

    - name: Run lsnrctl status as oracle user
      become_user: oracle
      shell: lsnrctl status
      register: listener_status

    - name: Perform kernel upgrade
      yum:
        name: '*'
        state: latest
        disable_gpg_check: yes

    - name: If Azure, disable Datadog repo and clean cache
      when: ansible_facts['virtualization_type'] == "azure"
      block:
        - name: Disable Datadog repo
          command: dnf config-manager --set-disabled datadog

        - name: Clean DNF cache
          shell: |
            dnf clean all
            rm -rf /var/cache/dnf/*

        - name: Configure required repositories for Azure
          shell: |
            rm /etc/dnf/vars/releasever
            dnf -y --disablerepo='*' remove 'rhui-azure-rhel8-eus'
            dnf -y --config='https://rhelimage.blob.core.windows.net/repositories/rhui-microsoft-azure-rhel8.config' install rhui-azure-rhel8
            dnf repolist

        - name: Update packages for Azure
          command: dnf --nogpgcheck update -y

    - name: Validate Python version for root and ec2-user
      shell: python3 --version
      register: python_version
      failed_when: "'Python {{ required_python_version }}' not in python_version.stdout"

    - name: Check if pip is installed
      command: rpm -qa | grep -i pip
      register: pip_installed

    - name: Install pip if removed
      when: pip_installed.stdout == ""
      block:
        - name: Remove local pip directories if present
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ ansible_env.HOME }}/.local/bin"
            - "{{ ansible_env.HOME }}/.local/lib"

        - name: Download pip installation script
          get_url:
            url: https://bootstrap.pypa.io/get-pip.py
            dest: "{{ python_pip_installation_file_location }}"

        - name: Install pip using the script
          command: sudo python3 "{{ python_pip_installation_file_location }}"

    - name: Create new session by opening a new terminal (manual step)
      debug:
        msg: "Please open a new terminal session to continue, then rerun the playbook."

    - name: Validate pip3 installation
      shell: pip3 --version
      register: pip_version
      failed_when: "'pip3' not in pip_version.stdout"

    - name: Create softlinks for pip if missing
      shell: |
        ln -s /usr/local/bin/pip{{ required_python_version }} /usr/bin/pip3
        ln -s /usr/local/bin/pip{{ required_python_version }} /usr/bin/pip
      when: "'pip3' not in pip_version.stdout"

    - name: Validate pythonjsonlogger module
      shell: |
        python3 -c 'import pythonjsonlogger' || exit 1
      register: json_logger_check
      failed_when: json_logger_check.rc != 0

    - name: Verify pythonjsonlogger availability post-upgrade
      shell: pip3 list *json*
      register: json_logger_list
      failed_when: "'python-json-logger' not in json_logger_list.stdout"

    - name: Install pythonjsonlogger manually if missing
      pip:
        name: python-json-logger=={{ json_logger_version }}
      when: "'python-json-logger' not in json_logger_list.stdout"

    - name: Ensure Datadog service is disabled
      service:
        name: datadog-agent
        enabled: no
        state: stopped

    - name: Reboot the VM
      reboot:
        msg: "Rebooting after kernel upgrade. Waiting for 10-15 minutes."
      when: python_version.stdout is search('Python {{ required_python_version }}') and json_logger_check.rc == 0
